mt_no <- filter(mtcars,!(row.names %in% ("Toyota Corolla")))
mt_no <- filter(mtcars,row.names %in% c("Toyota Corolla"))
mtcars[-grep("Toyota Corolla",row.names),]
mtcars[-c(17,20),]
no_c <- mtcars[-c(17,20),]
fit3_1 <- lm(mpg ~ am+hp+wt,no_c)
plot(fit3_1)
summary(fit3_1)
summary(fit3)
group_by(mtcars,am) %>% summarize(mean_mpg=mean(mpg))
group_by(mtcars,am) %>% summarize(mean_mpg=mean(mpg), std=std(mpg))
group_by(mtcars,am) %>% summarize(mean_mpg=mean(mpg), var=var(mpg))
group_by(mtcars,am) %>% summarize(mean_mpg=mean(mpg), var=sd(mpg))
```{r, echo=TRUE}
library(dplyr)
group_by(mtcars,am) %>% summarize(mean_mpg=mean(mpg), sd=sd(mpg))
```
```{r, echo=FALSE}
```
?mtcars
t.test(mpg ~ am, mtcars)
?t.test
?qt
dim(ToothGrowth)
tt <- t.test(mpg ~ am, mtcars)
tt$statistics
tt$statistic
?plot
cor(mtcars)
scatterplotMatrix(mtcars, spread=FALSE, lty.smooth=2,                  main="Scatter Plot Matrix")
scatterplotMatrix(mtcars, spread=FALSE, lty.smooth=2,main="Scatter Plot Matrix")
library(car)
scatterplotMatrix(mtcars, spread=FALSE, lty.smooth=2,main="Scatter Plot Matrix")
fit4 <- lm(mpg ~ am + hp + wt + hp:wt,mtcars)
confint(fit4)
fit3 <- lm(mpg ~ am + hp + wt, mtcars)
confint(fit4)
confint(fit3)
fit2 <- lm(mpg ~ am + hp, mtcars)
confint(fit2)
fit4 <- lm(mpg ~ am + wt, mtcars)
confint(fit4)
fit <- lm(mpg ~ am, mtcars)
summary(fit)
summary(fit)$coef
summary(fit)$coef[1]
summary(fit)$coef[2,1]
fit3 <- lm(mpg ~ am + hp + am*hp, mtcars)
summary(fit3)
exp_table <- matrix(rexp(sampleSize*observation,0.2),observation)
exp_table <- matrix(rexp(sampleSize*observation,0.2),observation)
exp_table <- matrix(rexp(sampleSize*observation,0.2),observation)
observation <- 1000
mean_table
source('~/Downloads/stat_infer_proj.R')
library(ggplot2)
source('~/Downloads/stat_infer_proj.R')
qplot(x=index, y= mean,data=mean_table,geom="bar",stat="identity")+geom_hline(yintercept =5, size =2, colour="green")
dim(mean_table)
View(mean_table)
g
source('~/Downloads/stat_infer_proj.R')
source('~/Downloads/stat_infer_proj.R')
g <- qplot(x=index, y= mean,data=mean_table,geom="bar",stat="identity")+geom_hline(yintercept =5, size =2, colour="green")
g
g <- qplot(x=index, y= mean,data=mean_table,geom="bar",stat="identity")+geom_hline(yintercept =5, size =2, colour="green")
g
barplot(mean_table)
table(mean_table$mean)
t <- table(mean_table$mean)
barplot(t)
t
g <- qplot(x=index, y= mean,data=mean_table,geom="bar",stat="identity")+geom_hline(yintercept =5, size =2, colour="green")
g
```{r, echo=TRUE}
sampleSize <- 40
observation <- 1000
exp_table <- matrix(rexp(sampleSize*observation,0.2),observation) #set the 40*1000 matrix#
mean_table <- apply(exp_table,1,mean) #calculate the mean of each observation#
mean_table <- data.frame(mean=mean_table) #convert to data frame#
index <- c(1:1000)
mean_table <- cbind(index,mean_table)
sample_mean <- mean(mean_table[,2])  #calculate the mean of 1000 observation#
g <- qplot(x=index, y= mean,data=mean_table,geom="bar",stat="identity")+ geom_hline(yintercept =5, size =2, colour="green")
g
((1/lamda)^2)/40
lamda=0.2
((1/lamda)^2)/40
vc <- group_by(ToothGrowth,supp,dose) %>% summarise(mean(len))
vc
?ToothGrowth
View(ToothGrowth)
vc05 <- subset(ToothGrowth, supp=="VC" & dose == 0.5)
View(vc05)
dim(ToothGrowth)
oj05 <- subset(ToothGrowth, supp=="OJ" & dose == 0.5)
t.test(vc05, oj05, var.equal=FALSE)
t.test(vc05, oj05)
vc05
oj05
t.test(vc05$len, oj05$len)
t.test(len ~ supp, var.equal=TRUE, data=ToothGrowth)
?t.test
t.test(vc05$len, oj05$len alternative = "less")
t.test(vc05$len, oj05$len, alternative = "less")
qt(c(0.05),df=58)
t.test(vc1,vc2, alternative="greater")$conf
t.test(vc1,vc2, alternative="less")$conf
t.test(vc1$len,vc2$len, alternative="less")$conf
vc05 <- subset(ToothGrowth, supp=="VC" & dose == 0.5)
dim(vc05)
The dose also effect the tooth length. The more dose,the more length growth.
## Basic data analysis
ahe dose also effect the tooth length. The more dose,the more length growth.
In conclusion, orange juice has better effect than vitamin c in tooth growth under dose 0.5 & 1. Orange juice and vitamin C has same effect under dose 2. The dose also effect the tooth length. The more dose,the more length growth.
orange juice has better effect than vitamin c in tooth growth under dose 0.5 & 1. Orange juice and vitamin C has same effect under dose 2. The dose also effect the tooth length. The more dose,the more length growth.
## Basic data analysis
## Basic data analysis
orange juice has better effect than vitamin c in tooth growth under dose 0.5 & 1. Orange juice and vitamin C has same effect under dose 2. The dose also effect the tooth length. The more dose,the more length growth.
### Basic data analysis
```{r, echo=TRUE}
vc <- group_by(ToothGrowth,supp,dose) %>% summarise(mean(len))
vc
```
### Comparison between delivery(supp) controled by dose
From the outcome, we can assume that in ToothGrown table, two delivery method (supp) does not correlate to the tooth len, the dose has positive correlation with tooth lenth.
```{r, echo=TRUE}
vc05 <- subset(ToothGrowth, supp=="VC" & dose == 0.5)
oj05 <- subset(ToothGrowth, supp=="OJ" & dose == 0.5)
### Basic data analysis
```{r, echo=TRUE}
vc <- group_by(ToothGrowth,supp,dose) %>% summarise(mean(len))
vc
```
### Comparison between delivery(supp) controled by dose
From the outcome, we can assume that in ToothGrown table, two delivery method (supp) does not correlate to the tooth len, the dose has positive correlation with tooth lenth.
```{r, echo=TRUE}
vc05 <- subset(ToothGrowth, supp=="VC" & dose == 0.5)
[poi9uytr5e43w2q12w3e4r5t6uy7iop0oi98u7y6t5re43wq21 qwertyuiop[poi98u765432123e4r5t6yuiop[]\;plokjhgfdsaASDFGHJKL;'']]
library(robust)
install.packages("robust")
?shuttle
install.packages("MASS")
?shuttl
?shuttle
library(MASS)
?shuttle
View(shuttle)
ravensData
str(use)
str(shuttle)
levels(shuttle$use)
fit <- glm(use <- sign,data=shuttle,family=binomial())
fit <- glm(use ~ sign,data=shuttle,family=binomial())
exp(coef(fit))
fit <- glm(use ~ wind,data=shuttle,family=binomial())
exp(coef(fit))
fit <- glm(use ~ wind + magn, data=shuttle,family=binomial())
exp(coef(fit))
fit <- glm(I(1-use) ~ wind, data=shuttle,family=binomial())
factor(shuttle$use)
shuttle$use <- 1 - shuttle$use
shuttle$use <- factor(shuttle$use, level=c(0,1), label=c("auto","noauto"))
View(shuttle)
library(MASS)
View(shuttle)
str(shuttle)
shuttle$use <- factor(shuttle$use, level=c(1,2), label=c("auto","noauto"))
View(shuttle)
levels(shuttle$use)
a <- shuttle$use
View(a)
a
table(a)
library(MASS)
View(shuttle)
str(shuttle)
str(shuttle$use)
a <- shuttle$use
nlevel(a)
nlevels(a)
nmax(a)
levels(a) <- c(1,0)
a
fit <- glm(use <- wind, data= shuttle, family=binomial())
fit <- glm(use ~ wind, data= shuttle, family=binomial())
exp(coef(fit))
fit <- glm(I(1-a) ~ wind, data= shuttle, family=binomial())
levels(a) <- c(0,1)
a
fit <- glm(I(a ~ wind, data= shuttle, family=binomial())
fit <- glm(a ~ wind, data= shuttle, family=binomial())
exp(coef(fit))
level(a) <- c(1,0)
levels(a) <- c(1,0)
a
fit2 <- glm(a ~ wind, data= shuttle, family=binomial())
exp(coef(fit2))
a <- shuttle$use
levels(a) <- c(1,0)
wind <- shuttle$wind
fit <- glm(a ~ wind,family=binomial())
b <_ shuttle$use
b <- shuttle$use
levels(b) <- c(0,1)
fit2 <- glm(b ~ wind, family=binomial())
exp(coef(fit))
exp(coef(fit2))
View(InsectSprays)
spray <- subset(InsectsSpray,spray=="A" | spray=="B")
spray <- subset(InsectSprayS,spray=="A" | spray=="B")
spray <- subset(InsectSprays,spray=="A" | spray=="B")
View(spray)
fit3 <- glm(count ~ spray, data=spray, family=poisson())
exp(coef(fit3))
1/1.0574
1100+ c(-1,1)*qt(0.95,8)*10
c1 <-c(140,138,150,148,135)
c2 <-c(132,135,151,146,130)
t.test(c1,c2,paired=TRUE)
1077+1123
power.t.test(n=100, delta=0.01*0.05, sd=0.04,alt="one.sided")$power
power.t.test(power=0.9, delta=0.01*0.05, sd=0.04,alt="one.sided")$n
o.5^4
0.5^4
0.5^4*5
-4/sqrt((1.5^2+1.8^2)/9)
1100+ c(-1,1)*qt(0.975,8)*10
power.t.test(power=0.9, delta=0.01*0.05, sd=0.04,alt="one.sided")$n
power.t.test(power=0.8, delta=0.01, sd=0.04,alt="one.sided")$n
?power.t.test
power.t.test(power=0.8, delta=0.01, sd=0.04,alt="one.sided")$n
power.t.test(power=0.8, delta=0, sd=0.04,alt="one.sided")$n
power.t.test(power=0.8, delta=0.01, sd=0.04,alt="one.sided")$n
power.t.test(power=0.8, delta=-0.01, sd=0.04,alt="one.sided")$n
power.t.test(power=0.8, delta=-0.01, sd=0.04,alt="one.sided",sig.level=0.05)$n
power.t.test(power=0.8, delta=0.01, sd=0.04,alt="one.sided",sig.level=0.05)$n
qnorm(0.95)
qnorm(0.8)
power.t.test(n=100, delta=0.01, sd=0.04,alt="one.sided",sig.level=0.05)
(qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
power.t.test(n=100, delta=0.01, sd=0.04,alt="one.sided",sig.level=0.05,type="one.sample")
power.t.test(power=0.8, delta=0.01, sd=0.04,alt="one.sided",sig.level=0.05,type="one.sample")$n
power.t.test(n=100, delta=0.01, sd=0.04,alt="one.sided",sig.level=0.05,type="one.sample")
View(mtcars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("caret")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
str(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ ., method="rpart", data=training)
install.packages("e1071")
modFit <- train(Case ~ ., method="rpart", data=training)
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
libaray(rpart.plot)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
olive <- olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
pred<- predict(modFit, newdata)
pred
str(olive)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
set.seed(13234)
modFit <- train(chd ~ age+ alcohol+obesity+tobacco+typea+ldl, method="glm, family="binomial",data=trainSA)
?train
modFit <- train(chd ~ age+ alcohol+obesity+tobacco+typea+ldl, method="glm", family=binomial(),data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred <- predict(modFit,testSA)
missClass(testSA, pred)
modFit
modFit$finalModel
?train
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel$y <- as.factor(vowel$y)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
q5 <- train(y~ ., method="rf", data=vowel.train)
varImp(q5$finalModel)
?varImp
varImp(q5$)
varImp(q5)
pml_train <- read.csv("pml-training.csv")
pml_test <- read.csv("pml-testing.csv")
View(pml_train)
View(pml_test)
pml_test$classe
pml_test$Classe
pml_train$classe
grep("classe",colnames(pml_train))
str(pml_train)
pml_train[,160]
library(dplyr)
pml_test2 <- select(pml_test, sum(is.na(x))==0)
pml_train2 <- select(pml_train, colSums(is.na(pml_train)) == 0)
pml_train2 <- pml_train[], colSums(is.na(pml_train)) == 0 ]
pml_train2 <- pml_train[, colSums(is.na(pml_train)) == 0 ]
View(pml_train2)
pml_train2[,12]
pml_train2[2,12]
str(pml_train2)
str(pml_train)
pml_train2[2,12] == ""
apply(pml_train2, 2, function(x) gsub("^$|^ $", NA, x))
pml_train3 <- apply(pml_train2, 2, function(x) gsub("^$|^ $", NA, x))
View(pml_train3)
?gsub
c <- c("1","2","3")
gsub("1","a",c)
pml_train <- apply(pml_train, 2, function(x) gsub("^$|^ $",NA,x))
View(pml_train)
pml_train <- pml_train[,colSums(is.na(pml_train)) == 0]
View(pml_train)
View(pml_train)
pm_train <- pml_train[,-c(2:7)]
View(pml_train)
View(pm_train)
pm_train <- pml_train[,-c(1:7)]
View(pm_train)
install.packages("shiny")
system.file("examples", package="shiny")
runExample("03_reactivity")
library(shiny)
runExample("03_reactivity")
View(mtcars)
View(mtcars)
runExample("03_reactivity")
runExample("07_widgets")
runExample("05_sliders")
runExample("08_html")
runExample("07_widgets")
View(mtcars)
runApp("DataProduct")
runExample("07_widgets")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
View(mtcars)
library(dplyr)
t <- group_by(mtcars, carb) %>% summarize(mean=mean(mpg))
t
plot(t)
qplot(x=carb, y=mean,
data=t, geom="bar", stat="identity",
position="dodge")
library(ggplot2)
qplot(x=carb, y=mean,
data=t, geom="bar", stat="identity",
position="dodge")
runExample("03_reactivity")
runExample("01_hello")
runExample("03_reactivity")
runApp("DataProduct")
runExample("03_reactivity")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runApp("DataProduct")
runExample("03_reactivity")
runExample("01_hello")
runApp("DataProduct")
runApp("DataProduct", display.mode = "showcase")
t <- group_by(mtcars, carb) %>% summarize(mean=mean(mpg))
qplot(x=carb, y=mean, data=t, geom="bar", stat="identity",position="dodge")
t <- group_by(mtcars, gear) %>% summarize(mean=mean(mpg))
qplot(x=gear, y=mean, data=t, geom="bar", stat="identity",position="dodge")
t <- group_by(mtcars, vs) %>% summarize(mean=mean(mpg))
qplot(x=vs, y=mean, data=t, geom="bar", stat="identity",position="dodge")
t <- group_by(mtcars, cyl) %>% summarize(mean=mean(mpg))
qplot(x=cyl, y=mean, data=t, geom="bar", stat="identity",position="dodge")
t <- group_by(mtcars, cyl) %>% summarize(mean=mean(mpg))
qplot(x=cyl, y=mean, data=t, geom="bar", stat="identity",position="dodge")
runApp("DataProduct", display.mode = "showcase")
min(mtcars$wt)
max(mtcars$wt)
min(mtcars$disp)
max(mtcars$disp)
?mtcars
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
level(mtcars$cyl)
levels(mtcars$cyl)
str(mtcars)
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
d <- data.frame()
d$a <- 1
d$a <- c("1")
d
colNames(d)
colName(d)
colNames(d)
colnames(d)
colnames(d) <- c("a","k","c")
colnames(d)[1:3] <- c("a","k","c")
nodata <- data.frame(disp= numeric(0), wt= numeric(0), cyl = numeric(0))
min(mtcars$hp)
max(mtcars$hp)
runApp("DataProduct", display.mode = "showcase")
para <- data.frame(disp=numeric(0), hp=numeric(0),
wt=numeric(0),cyl=numeric(0),am=numeric(0),vs=numeric(0))
para
para$disp <- 1
para[1,1] <- 1
para
para <- data.frame(disp=numeric(0), hp=numeric(0),
wt=numeric(0),cyl=numeric(0),am=0,vs=1)
runApp("DataProduct", display.mode = "showcase")
print(para)
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runExample("03_reactivity")
library(caret)
modFit <- train(mpg ~ disp+hp+wt+cyl+am+vs,method="glm",data=mtcars)
runApp("DataProduct", display.mode = "showcase")
c <- "1"
c
as.numeric(c)
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
runApp("DataProduct", display.mode = "showcase")
require(devtool)
require(devtools)
install.packages("devtools")
library(devtools)
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
install.packages('devtools')
library(devtools)
install_github('rstudio/shinyapps')
library(shinyapps)
library(shiny)
install_github('rstudio/shinyapps')
library(shiny)
library(devtools)
install_github('rstudio/shinyapps')
library(shinyapps)
library(devtools)
install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='linyupeng2400',
token='B84C3D19FEA40374B2307512C680EA70',
secret='ri2crUFLDc10EVsd3R6ObDtCBIBu5anEv79TJypR')
library(shiny)
runApp("DataProduct")
runApp("DataProduct")
library(shinyapps)
deployApp("DataProduct")
runApp("DataProduct")
deployApp("DataProduct")
setwd("DataProductPitch")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
